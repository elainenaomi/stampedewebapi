<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="initApp()">
	<!-- Define the HTTP service
	<mx:HTTPService 
		id="dataService"
		resultFormat="e4x"
		result="dataResultHandler(event);"
		fault="dataFaultHandler(event);"
		/>-->
	
	<!-- Controller -->
	<mx:Script>
		<![CDATA[
			import mx.rpc.http.HTTPService;
			import flash.net.navigateToURL;
			
			import json.JParser;
			
			import mx.charts.DateTimeAxis;
			import mx.charts.LegendItem;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.managers.BrowserManager;
			import mx.managers.IBrowserManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.URLUtil;
			import mx.charts.events.ChartItemEvent;
			import mx.collections.*;
			import mx.formatters.*;
			
			private var bm:IBrowserManager;
			private const workflowID:String = "7113f605-aca8-461e-b734-39a357c09ed7";
	       	
		
			
			[Bindable] 
			private var statusData:ArrayCollection = new ArrayCollection();
			private var jobStatusClicked:String;
			
			
			public function initApp():void {
				bm = BrowserManager.getInstance();  
				var dataService:HTTPService = new HTTPService();              				
				dataService.url="http://awp.cs.usfca.edu/workflow/"+workflowID;
				dataService.addEventListener(ResultEvent.RESULT, dataResultHandler);
				dataService.send();
			}
			
			private function dataResultHandler(event:ResultEvent):void
			{				
				var jparser:JParser = new JParser();
				var obj:Object = JParser.decode(event.result.toString());
												
				for(var j:String in obj['jobStatus']){
					var singleStatus:Object = new Object();
					singleStatus["jobStatus"] = j;
					singleStatus["num"]= obj['jobStatus'][j];
					statusData.addItem(singleStatus);
				}														
			}
			
			protected function mychart_itemClickHandler(event:ChartItemEvent):void
			{
    			createDataProvider(event.hitData.item);
			}
								          
            private function createDataProvider(item:Object):void{  
            	 jobStatusClicked = item["jobStatus"];
            	 
            	
            	 var dataService:HTTPService = new HTTPService();              				
				 dataService.url="http://awp.cs.usfca.edu/workflow/"+workflowID+"/jobs";
				 dataService.addEventListener(ResultEvent.RESULT, jobsResultHandler);
				 dataService.send();	 
          }	
          
          private function jobsResultHandler(event:ResultEvent):void
			{				
				var jparser:JParser = new JParser();
				var obj:Object = JParser.decode(event.result.toString());
				var dp:Array = [];
				var jobData:ArrayCollection; 		               	            	            
    	            
                for each(var job:Object in obj){
                	var jobStatus:String = job["state"];
                	if(jobStatus == "EXECUTE" || jobStatus == "IMAGE_SIZE"){
                		if(jobStatusClicked=="running"){
                			var jobObj1:Object = new Object();
                			jobObj1["state"] = job["state"];
                			jobObj1["id"] = job["id"];
                			jobObj1["submitted"] = job["submitted"];
                			jobObj1["runtime"] = job["runtime"];
                			dp.push(jobObj1);  
                		}
                	}else if(jobStatus == "JOB_SUCCESS"){
                		if(jobStatusClicked=="completed"){
                			var jobObj2:Object = new Object();
                			jobObj2["state"] = job["state"];
                			jobObj2["id"] = job["id"];
                			jobObj2["submitted"] = job["submitted"];
                			jobObj2["runtime"] = job["runtime"];
                			dp.push(jobObj2);  
                		}
                		
                	}else if(jobStatus == "JOB_FAILED"){
                		if(jobStatusClicked=="failed"){
                			var jobObj3:Object = new Object();
                			jobObj3["state"] = job["state"];
                			jobObj3["id"] = job["id"];
                			jobObj3["submitted"] = job["submitted"];
                			jobObj3["runtime"] = job["runtime"];
                			dp.push(jobObj3);  
                		}
                		
                	}else if(jobStatus == "JOB_SUBMIT"){
                		if(jobStatusClicked=="submitted"){
                			var jobObj4:Object = new Object();
                			jobObj4["state"] = job["state"];
                			jobObj4["id"] = job["id"];
                			jobObj4["submitted"] = job["submitted"];
                			jobObj4["runtime"] = job["runtime"];
                			dp.push(jobObj4);  
                		}               		
                	} 
                }
               
				jobData = new ArrayCollection(dp);
                jobsGrid.dataProvider= jobData;												
			}	
			
			 public function display(
       			 data:Object,
       			 field:String,
       			 index:Number,
        		 percentValue:Number):String
   		    {
       		     return "JobStatus:" + data.jobStatus + "\nNumber:" + data.num +
          		  "\nPercentage:" + round(percentValue,2) + "%";
    	    }
    	    
    		
     		public function round(num:Number, precision:Number):Number {
       		 var result:String;
       		 var f:NumberFormatter = new NumberFormatter();
       		 f.precision = precision;
      		  result = f.format(num);
       		 return Number(result);
    		 }

						
		]]>
	</mx:Script>
	

     <mx:Panel title="{'Workflow Panel: ' + workflowID.toString()}" width="600" height="500"  id="panel" >      
        <mx:PieChart id="mychart" 
            height="150%" 
            width="150%"                     
            showDataTips="true"        
            dataProvider="{statusData}"  itemClick="mychart_itemClickHandler(event)">                    
            <mx:series >
                <mx:PieSeries 
                    nameField="jobStatus"
                    labelPosition="callout" 
                      
                    field="num"
                    labelFunction="display"
                     >
                    <!-- Clear the drop shadow filters from the chart. -->
                    <mx:filters>
                        <mx:Array/>
                    </mx:filters>
                </mx:PieSeries>
            </mx:series>
        </mx:PieChart>  
        <mx:Legend dataProvider="{mychart}"/>
       
       
        <mx:ControlBar>
          <mx:Spacer width="100%"/>
          <mx:DataGrid id="jobsGrid" width="550" height="150"  >
               <mx:columns>           
                    <mx:DataGridColumn headerText="id" dataField="id" minWidth="250"/>
                    <mx:DataGridColumn headerText="state" dataField="state" minWidth="100"/>
                    <mx:DataGridColumn headerText="runtime" dataField="runtime" />
                    <mx:DataGridColumn headerText="submitted" dataField="submitted" minWidth="100"/>                  
               </mx:columns>
          </mx:DataGrid>
          <mx:Legend id="legend" />                  
      </mx:ControlBar>   
    </mx:Panel>	
</mx:Application>
