#summary How to use mongo API base on STAMPEDE API specification.
= Basic parameters =
Similar to stampede connString. Mongo API required information to connect to the host server. 
host		: mongo host server
database	: database name	
collection	: collection name
port		: port number

{{{
options = {"host": "localhost",
"database": "application",
"collection": "netlogger",
"port": 27017	
}
}}}

= How to use mongoAPI =
Code
{{{
from netlogger.analysis.workflow.mongo_workflow import Workflow as mongo_workflow
options = {"host": "localhost",
"database": "application",
"collection": "netlogger",
"port": 27017	
}
workflow = mongo_workflow(options)				## Create connection to mongo db.
workflow.initialize('5117013a-f7f1-4bc5-a2f8-517186599fad')	## Init workflow object from mongo db by using wf_id.

#print workflow					## Show workflow information
for job in workflow.jobs:			## Iterate in jobs list
	if job.is_failure:			## print only failure job.
	print job.job_submit_seq,job.name	## Print job's id and name
}}}

Return
{{{
21 register_viz_glidein_6_0
24 register_viz_glidein_6_0
26 register_viz_glidein_6_0
27 register_viz_glidein_7_0
28 register_viz_glidein_8_0
29 register_viz_glidein_7_0
30 register_viz_glidein_8_0
31 register_viz_glidein_7_0
32 register_viz_glidein_8_0
}}}


= Class && Implemented method =

== Workflow ==
|| *property* || *return* ||
||initialize(wf_id)|| Init workflow ||
||wf_uuid|| wf_uuid for this workflow ||
||dax_label|| dax_label from storage backend ||
||timestamp|| timestamp from storage backend. ||
||submit_hostname|| submit_hostname from storage backend. ||
||submit_dir|| submit_dir from storage backend. ||
||planner_arguments|| planner_argumentstimestamp from storage backend. ||
||user|| user from storage backend. ||
||grid_dn|| grid_dn from storage backend. ||
||planner_version|| planner_version from storage backend. ||
||parent_wf_uuid|| parent_wf_uuid from storage backend. ||
||is_running|| Derived boolean flag indicating if the workflow is currently running.  Derived in a backend-appropriate way. ||
||start_time|| Return the start_time from the storage backend. Should be returned as a python utc datetime object or None ||
||end_time||Return the end_time from the storage backend. Should be returned as a python utc datetime object or None ||
||elapsed_time|| A derived value of the elapsed time of the current workflow returned as a python timedelta object.  This could be calculated as the delta between the start and end times if the workflow is complete or between the start and current time if it is not ||
||jobs|| Returns a list of the jobs associated with this workflow object. ||
||total_jobs_executed|| Return the number of jobs that were executed as an integer value. ||
||successful_jobs|| Return the number of jobs that executed successfully as an integer value.||
||failed_jobs|| Return the number of jobs that failed as an integer value. ||
||restarted_jobs|| Return the number of jobs that were restarted. ||
||submitted_jobs|| Return the number of jobs that were submitted. ||
||jobtypes_executed|| Returns a dictionary of the various jobtypes that are executed in the current workflow and a count of how many of each type. ||

== Job ==

|| *property* || *return* ||
|| _sql_initialize(wf_id, job_id): || private initialization method that accepts the wf_id and job_id as primary key ( different from stampede api!) ||
|| job_submit_seq || job_submit_seq of current job (an input arg). ||
|| name || Return the job name from the storage backend. ||
|| host || Return job host information from storage backend. ||
|| condor_id || Return the condor_id from the storage backend. ||
|| jobtype || Return jobtype from the storage backend. ||
|| clustered || Return the clustered boolean flag from the storage backend.  This may need to be derived depending on how the backend implementation does/not store this value. ||
|| site_name || Return the site name from the storage backend. ||
|| remote_user || Return the remote use of the current job from the storage backend. ||
|| remote_working_dir || Return the remote working directory of the current job from the storage backend. ||
|| cluster_start_time || Return the job cluster start time as a python datetime object (utc) if it exists or None if it does not.  Not all jobs will have this value. ||
|| cluster_duration || Return the job cluster duration from the storage backend as a float or None if this value is not assocaited with the current job.  Not all job will have this value. ||
|| task || Returns a list of the tasks associated with this job object. ||
|| is_restart || Return a boolean flag indicating whether or not this curent job is a "restart". ||
|| is_success || Return a boolean flag indicating whether or not this curent job was successful.  This value will be derived from backend information as appropriate. ||
|| is_failure || Return a boolean flag indicating whether or not this curent job has failed.  This value will be derived from backend information as appropriate. ||
|| current_state || Return the current state of this job.  This property pretty much requires lazy evaluation every access rather than attribute caching. ||
|| submit_time || Return the timestamp of when this job was submitted. ||
|| elapsed_time || Return the elapsed time of this job.  Calculated as the delta between the submit time and the current/last jobstate timestamp. ||

== Jobstate ==

|| *property* || *return* ||
||_sql_initialize(wf_id, job_id): || private initialization method that accepts the wf_id and job_id as primary key ( different from stampede api!)||
|| state || Return the current jobstate state.  Might be none if there is no state information logged yet. ||
|| timestamp || Return the timestampe of the current job state.  Might be none if there is no state information logged yet. ||

== Host ==

|| *property* || *return* ||
|| _sql_initialize( wf_id, job_id) || private initialization method that accepts the wf_id and job_id as primary key ( different from stampede api!)||
|| site_name || Return the site name associated with this host. ||
|| hostname || Return host name ||
|| ip_address || Return the ip address  ||
|| uname || Return the uname information of this host machine. ||
|| total_ram || Return the total ram of this host machine. ||

== Task ==

|| *property* || *return* ||
|| _sql_initialize(wf_id, job_id, task_id) || private initialization method that accepts the wf_id, job_id, task_id as primary key ( different from stampede api!) ||
|| start_time || Return start time of this task from the storage backend as a python datetime object (utc). ||
|| duration || Return duration of this task from the storage backend as a float. ||
|| exitcode || Return the exitcode of this task from the storage backend as an integer. ||
|| transformation || Return the transformation type of this task from the storage backend. ||
|| executable || Return the executable invoked by this task from the storage backend. ||
|| arguments || Return the task args from the storage backend. ||