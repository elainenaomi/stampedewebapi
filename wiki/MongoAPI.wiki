= Basic parameters =
  Similar to stampede connString. Mongo API required information to connect to the host server. 
 
host		: mongo host server
database	: database name	
collection	: collection name
port		: port number

{{{
options = {"host": "localhost",
"database": "application",
"collection": "netlogger",
"port": 27017	
}
}}}



= How to use mongoAPI =
Code
{{{
from netlogger.analysis.workflow.mongo_workflow import Workflow as mongo_workflow
options = {"host": "localhost",
"database": "application",
"collection": "netlogger",
"port": 27017	
}
workflow = mongo_workflow(options)				## Create connection to mongo db.
workflow.initialize('5117013a-f7f1-4bc5-a2f8-517186599fad')	## Init workflow object from mongo db by using wf_id.

print workflow			## Show workflow information
for job in workflow.jobs	## Iterate in jobs list
	print job.name		## Print job's name of each job
}}}

Return
{{{
create_dir_montage_0_viz_glidein
stage_in_viz_glidein_0
merge_mProjectPP-3.0_PID1_ID3
merge_mProjectPP-3.0_PID1_ID2
merge_mProjectPP-3.0_PID1_ID1
merge_mProjectPP-3.0_PID1_ID4
...
...
...
register_viz_glidein_8_0
register_viz_glidein_7_0
register_viz_glidein_8_0
}}}


= Class && Implemented method =

== Workflow ==

|| *property* || *return* ||
||initialize(wf_id)|| Init workflow ||
||wf_uuid|| wf_uuid for this workflow ||
||dax_label|| dax_label from storage backend ||
||timestamp|| timestamp from storage backend. ||
||submit_hostname|| submit_hostname from storage backend. ||
||submit_dir|| submit_dir from storage backend. ||
||planner_arguments|| planner_argumentstimestamp from storage backend. ||
||user|| user from storage backend. ||
||grid_dn|| grid_dn from storage backend. ||
||planner_version|| planner_version from storage backend. ||
||parent_wf_uuid|| parent_wf_uuid from storage backend. ||
||is_running|| Derived boolean flag indicating if the workflow is currently running.  Derived in a backend-appropriate way. ||
||start_time|| Return the start_time from the storage backend. Should be returned as a python utc datetime object or None ||
||end_time||Return the end_time from the storage backend. Should be returned as a python utc datetime object or None ||
||elapsed_time|| A derived value of the elapsed time of the current workflow returned as a python timedelta object.  This could be calculated as the delta between the start and end times if the workflow is complete or between the start and current time if it is not ||
||jobs|| Returns a list of the jobs associated with this workflow object. ||
||total_jobs_executed|| Return the number of jobs that were executed as an integer value. ||
||successful_jobs|| Return the number of jobs that executed successfully as an integer value.||
||failed_jobs|| Return the number of jobs that failed as an integer value. ||
||restarted_jobs|| Return the number of jobs that were restarted. ||
||submitted_jobs|| Return the number of jobs that were submitted. ||
||jobtypes_executed|| Returns a dictionary of the various jobtypes that are executed in the current workflow and a count of how many of each type. ||
  
== Job ==

|| *property* || *return* ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||

== Jobstate ==

|| *property* || *return* ||
||_sql_initialize(wf_id, job_id): || private initialization method that accepts the wf_id and job_id as primary key ( different from stampede api!)||
|| state || Return the current jobstate state.  Might be none if there is no state information logged yet. ||
|| timestamp || Return the timestampe of the current job state.  Might be none if there is no state information logged yet. ||

== Host ==

|| *property* || *return* ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||
|| xxx || yyy ||

== Task ==

|| *property* || *return* ||
|| _sql_initialize(wf_id, job_id, task_id) || private initialization method that accepts the wf_id, job_id, task_id as primary key ( different from stampede api!) ||
|| start_time || Return start time of this task from the storage backend as a python datetime object (utc). ||
|| duration || Return duration of this task from the storage backend as a float. ||
|| exitcode || Return the exitcode of this task from the storage backend as an integer. ||
|| transformation || Return the transformation type of this task from the storage backend. ||
|| executable || Return the executable invoked by this task from the storage backend. ||
|| arguments || Return the task args from the storage backend. ||